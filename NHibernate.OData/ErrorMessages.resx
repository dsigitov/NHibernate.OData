<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Expression_CannotCompareTypes" xml:space="preserve">
    <value>Cannot compare values of type '{0}'.</value>
  </data>
  <data name="Expression_CannotInverse" xml:space="preserve">
    <value>Cannot inverse literal of type '{0}'.</value>
  </data>
  <data name="Expression_CannotNegate" xml:space="preserve">
    <value>Cannot negate literal of type '{0}'.</value>
  </data>
  <data name="Expression_IncompatibleTypes" xml:space="preserve">
    <value>Operation '{0}' is not supported on type '{1}'.</value>
  </data>
  <data name="Lexer_DecimalCannotHaveExponent" xml:space="preserve">
    <value>Unexpected exponent for decimal literal at {0}.</value>
  </data>
  <data name="Lexer_ExpectedDigitsAfterExponent" xml:space="preserve">
    <value>Expected digits after exponent at {0}.</value>
  </data>
  <data name="Lexer_InvalidBinaryFormat" xml:space="preserve">
    <value>Binary format is invalid at {0}.</value>
  </data>
  <data name="Lexer_InvalidDateTimeFormat" xml:space="preserve">
    <value>Date/time format is invalid at {0}.</value>
  </data>
  <data name="Lexer_InvalidDurationFormat" xml:space="preserve">
    <value>Duration format is invalid at {0}.</value>
  </data>
  <data name="Lexer_InvalidGuidFormat" xml:space="preserve">
    <value>Guid format is invalid at {0}.</value>
  </data>
  <data name="Lexer_LongCannotHaveExponent" xml:space="preserve">
    <value>Unexpected exponent for long literal at {0}.</value>
  </data>
  <data name="Lexer_UnexpectedCharacter" xml:space="preserve">
    <value>Unexpecter character '{0}' at offset {1}.</value>
  </data>
  <data name="Lexer_UnterminatedString" xml:space="preserve">
    <value>Unterminated string starting at {0}.</value>
  </data>
  <data name="LiteralUtil_IncompatibleTypes" xml:space="preserve">
    <value>Operation is not compatible on types '{0}' and '{1}'.</value>
  </data>
  <data name="LiteralUtil_UnknownEdmType" xml:space="preserve">
    <value>Unknown EDM type '{0}'.</value>
  </data>
  <data name="Method_CannotCast" xml:space="preserve">
    <value>Cannot cast value to '{0}'.</value>
  </data>
  <data name="Method_InvalidArgumentType" xml:space="preserve">
    <value>Argument {1} of method '{0}' must be of type '{2}'.</value>
  </data>
  <data name="ODataExpression_InvalidQueryStringElement" xml:space="preserve">
    <value>Cannot understand query string element '{0}'.</value>
  </data>
  <data name="ODataExpression_SkipTopMustBePositive" xml:space="preserve">
    <value>Query string parameter '{0}' must be a positive integer.</value>
  </data>
  <data name="ODataRequest_AmbiguousEntityName" xml:space="preserve">
    <value>Could not resolve entity name '{0}'.</value>
  </data>
  <data name="ODataRequest_PropertyDoesNotExistOnParent" xml:space="preserve">
    <value>Entity '{0}' does not have a field '{1}'.</value>
  </data>
  <data name="ODataRequest_PropertyNotARelationship" xml:space="preserve">
    <value>Property '{0}' of entity '{1}' is not a relationship.</value>
  </data>
  <data name="ODataService_PersisterMustHaveIdentifierProperty" xml:space="preserve">
    <value>Persister of type '{0}' does not have an identifier property.</value>
  </data>
  <data name="ODataService_UnsupportedPersister" xml:space="preserve">
    <value>Persister of type '{0}' is not supported.</value>
  </data>
  <data name="OrderByParser_ExpectedNextOrEnd" xml:space="preserve">
    <value>Expected end, comma, asc or desc.</value>
  </data>
  <data name="Parser_ArgumentMustBeStringLiteral" xml:space="preserve">
    <value>Argument {1} of method '{0}' must be a string literal.</value>
  </data>
  <data name="Parser_CannotParseArgumentList" xml:space="preserve">
    <value>Cannot parse argument list.</value>
  </data>
  <data name="Parser_EmptySource" xml:space="preserve">
    <value>Unexpected empty expression.</value>
  </data>
  <data name="Parser_ExpectedBinaryOperator" xml:space="preserve">
    <value>Expected binary operator.</value>
  </data>
  <data name="Parser_ExpectedBooleanExpression" xml:space="preserve">
    <value>Expected boolean expression.</value>
  </data>
  <data name="Parser_ExpectedBooleanLiteral" xml:space="preserve">
    <value>Expected boolean literal.</value>
  </data>
  <data name="Parser_ExpectedIdentifier" xml:space="preserve">
    <value>Expected identifier.</value>
  </data>
  <data name="Parser_ExpectedLiteral" xml:space="preserve">
    <value>Expected literal.</value>
  </data>
  <data name="Parser_ExpectedLiteralExpression" xml:space="preserve">
    <value>Expected literal expression.</value>
  </data>
  <data name="Parser_ExpectedOperator" xml:space="preserve">
    <value>Expected operator.</value>
  </data>
  <data name="Parser_ExpectedSyntax" xml:space="preserve">
    <value>Expected syntax.</value>
  </data>
  <data name="Parser_ExpectedToken" xml:space="preserve">
    <value>Expected {0}.</value>
  </data>
  <data name="Parser_IllegalArgumentCount" xml:space="preserve">
    <value>Method '{0}' expectes {1} arguments.</value>
  </data>
  <data name="Parser_IllegalVarArgumentCount" xml:space="preserve">
    <value>Method '{0}' expects between {1} and {2} arguments.</value>
  </data>
  <data name="Parser_TrailingTokens" xml:space="preserve">
    <value>Unexpected trailing tokens.</value>
  </data>
  <data name="Parser_UnexpectedEnd" xml:space="preserve">
    <value>Unexpected end.</value>
  </data>
  <data name="Parser_UnknownMethod" xml:space="preserve">
    <value>Unknown method '{0}'.</value>
  </data>
  <data name="Parser_UnknownCollectionMethod" xml:space="preserve">
    <value>Unknown collection method '{0}'.</value>
  </data>
  <data name="PathParser_InvalidPath" xml:space="preserve">
    <value>Could not parse path.</value>
  </data>
  <data name="Parser_CannotParseLambdaExpression" xml:space="preserve">
    <value>Cannot parse lambda expression.</value>
  </data>
  <data name="Expression_LambdaMemberMustStartWithParameter" xml:space="preserve">
    <value>Member expressions inside a lambda expression must start with a lambda parameter</value>
  </data>
  <data name="Resolve_CannotResolveDynamicComponentMember" xml:space="preserve">
    <value>Cannot resolve member '{0}' of dynamic component '{1}' on '{2}'</value>
  </data>
  <data name="Resolve_CannotResolveName" xml:space="preserve">
    <value>Cannot resolve name '{0}' on '{1}'</value>
  </data>
  <data name="Expression_LambdaParameterIsAlreadyDefined" xml:space="preserve">
    <value>Lambda expression parameter '{0}' has been already defined in the parent scope.</value>
  </data>
</root>